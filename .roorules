# Rules from .roorules:
# OTAK Racking Tool - アーキテクチャ設計書

## プロジェクト概要
データセンター・サーバールーム向けのラック管理システム。
機器の配置、電源管理、冷却計算、ケーブル管理などの包括的な機能を提供。

## システムアーキテクチャ

```mermaid
classDiagram
    %% メインアプリケーション
    class App {
        -zoomLevel: number
        -selectedEquipment: Equipment | null
        -activeViewMode: string | null
        -rackViewPerspective: RackViewPerspective
        -isProMode: boolean
        -racks: Record~string, Rack~
        -floorSettings: FloorSettings
        -infoModal: InfoModalProps | null
        -confirmModal: ConfirmModalProps | null
        +render(): JSX.Element
        +handleDragStart(e: DragEvent, item: Equipment): void
        +handleEquipmentDragStart(e: DragEvent, equipment: Equipment, rackId: string, unit: number): void
        +handleDragOver(e: DragEvent, unit: number, rackId: string): void
        +handleDrop(e: DragEvent, unit: number, rackId: string): void
        +handleDragEnd(): void
        +showInfoModal(title: string, message: string): void
        +showConfirmModal(title: string, message: string, onConfirm: Function): void
        +toggleProMode(): void
    }

    %% 型定義
    class Equipment {
        +id: string
        +name: string
        +height: number
        +depth: number
        +power: number
        +heat: number
        +weight: number
        +type: EquipmentType
        +color: string
        +opacity?: number
        +dualPower: boolean
        +airflow: string
        +cfm: number
        +heatGeneration: number
        +description: string
        +specifications?: Record~string, string~
        +mountingNotes?: string
        +startUnit?: number
        +endUnit?: number
        +isMainUnit?: boolean
        +mountingMethod?: 'rails' | 'cage-nuts' | 'shelf' | 'direct'
        +requiresRails?: boolean
        +requiresCageNuts?: boolean
        +pduType?: string
        +nutType?: string
        +screwType?: string
        +washerType?: string
        +requiresShelf?: boolean
        +system?: string
        +role?: EquipmentRole
        +availableSizes?: EquipmentSize[]
        +selectedSize?: number
    }

    class Rack {
        +id: string
        +name: string
        +type: string
        +units: number
        +depth: number
        +width: number
        +equipment: Record~number, Equipment~
        +powerConnections: Record~string, PowerConnection~
        +mountingOptions: Record~string, MountingOption~
        +labels: Record~string, Label~
        +cageNuts: Record~number, CageNutConfig~
        +rails: Record~number, RailConfiguration~
        +partInventory: Record~string, Equipment~
        +fans: FanConfig
        +position: Position
        +cabling: CablingConfig
        +housing: HousingConfig
        +environment: EnvironmentConfig
        +pduPlacements: PDUPlacement[]
        +physicalStructure: PhysicalStructure
    }

    class PhysicalStructure {
        +frame: RackFrame
        +frontDoor: RackDoor
        +rearDoor: RackDoor
        +leftPanel: SidePanel
        +rightPanel: SidePanel
        +mountingPosts: any
        +base: RackBase
        +top: RackTop
        +dimensions: any
        +weight: any
        +ventilation: any
    }

    class FloorSettings {
        +hasAccessFloor: boolean
        +floorHeight: number
        +tileSize: number
        +supportType: 'adjustable' | 'fixed' | 'string'
        +loadCapacity: 'light' | 'medium' | 'heavy'
        +cableRouting: any
    }

    class RailConfiguration {
      +frontLeft: RailPosition
      +frontRight: RailPosition
      +rearLeft: RailPosition
      +rearRight: RailPosition
    }

    %% コンポーネント階層
    class LeftSidebar {
        +zoomLevel: number
        +activeViewMode: string | null
        +currentPerspective: RackViewPerspective
        +isProMode: boolean
        +onZoomChange(zoom: number): void
        +onActiveViewModeChange(mode: string | null): void
        +onDragStart(e: DragEvent, item: any): void
        +onPerspectiveChange(perspective: RackViewPerspective): void
        +onToggleProMode(): void
        +render(): JSX.Element
    }

    class RightSidebar {
        +racks: Record~string, Rack~
        +selectedRack: string
        +floorSettings: FloorSettings
        +isProMode: boolean
        +onRackSelect(rackId: string): void
        +onAddRack(): void
        +onRemoveRack(rackId: string): void
        +onDuplicateRack(rackId: string): void
        +onClearAllEquipment(): void
        +onShowRackManager(): void
        +onShowFloorSettings(): void
        +onShowCoolingConfig(): void
        +onShowPowerConfig(): void
        +render(): JSX.Element
    }

    class RackView {
        +rack: Rack
        +zoomLevel: number
        +selectedRack: string
        +activeViewMode: string | null
        +perspective: RackViewPerspective
        +draggedItem?: Equipment | null
        +hoveredUnit?: number | null
        +onDragOver?(e: DragEvent, unit: number): void
        +onDrop?(e: DragEvent, unit: number): void
        +onEquipmentClick?(equipment: Equipment): void
        +onEquipmentRemove?(unit: number): void
        +onEquipmentDragStart?(equipment: Equipment, unit: number, e: DragEvent): void
        +onCageNutInstall?(unit: number, side: string, position: string, nutType: string): void
        +onCageNutRemove?(unit: number, side: string, position: string): void
        +onAutoInstallCageNuts?(unit: number, nutType: string): void
        +onUpdatePhysicalStructure?(updates: Partial~PhysicalStructure~): void
        +onRailInstall?(unit: number, side: 'left' | 'right', railType: string): void
        +onRailRemove?(unit: number, side: 'left' | 'right'): void
        +onPduInstall?(side: 'left' | 'right', top: number): void
        +onPduRemove?(pduId: string): void
        +render(): JSX.Element
    }

    class RackUnit {
        +rack: Rack
        +unit: number
        +zoomLevel: number
        +unitHeight: number
        +fontSize: number
        +activeViewMode: string | null
        +selectedRack: string
        +coolingStats: CoolingStats
        +perspective: RackViewPerspective
        +render(): JSX.Element
    }

    class RackStructure {
        +rack: Rack
        +zoomLevel: number
        +unitHeight: number
        +perspective: RackViewPerspective
        +onUpdatePhysicalStructure?(updates: Partial~PhysicalStructure~): void
        +render(): JSX.Element
    }

    class RackPDU {
        +rack: Rack
        +zoomLevel: number
        +unitHeight: number
        +perspective: RackViewPerspective
        +onPduInstall?(side: 'left' | 'right', top: number): void
        +onPduRemove?(pduId: string): void
        +render(): JSX.Element
    }

    class MountingHoles {
        +rack: Rack
        +unit: number
        +zoomLevel: number
        +unitHeight: number
        +perspective: 'front' | 'rear'
        +onCageNutInstall?(unit: number, side: string, position: string, nutType: string): void
        +onCageNutRemove?(unit: number, side: string, position: string): void
        +onRailInstall?(unit: number, side: 'left' | 'right', railType: string): void
        +onRailRemove?(unit: number, side: 'left' | 'right'): void
        +render(): JSX.Element
    }

    class RailManager {
        +rack: Rack
        +unit: number
        +onInstallRail(unit: number, side: 'left' | 'right', railType: RailType): void
        +onRemoveRail(unit: number, side: 'left' | 'right'): void
        +render(): JSX.Element
    }

    class EquipmentLibrary {
        +onDragStart(e: DragEvent, item: Equipment): void
        +render(): JSX.Element
    }

    class ModalsAndDialogs {
        +currentRack: Rack | null
        +selectedEquipment: Equipment | null
        +showEquipmentModal: boolean
        +racks?: Record~string, Rack~
        +showRackManager?: boolean
        +floorSettings?: FloorSettings
        +showFloorSettings?: boolean
        +infoModal?: InfoModalProps | null
        +confirmModal?: ConfirmModalProps | null
        +onCloseEquipmentModal(): void
        +onUpdateEquipmentSize(equipmentId: string, newHeight: number): void
        +render(): JSX.Element
    }

    %% Hooks
    class useRackState {
        +racks: Record~string, Rack~
        +selectedRack: string
        +floorSettings: FloorSettings
        +isProMode: boolean
        +currentRack: Rack
        +setSelectedRack(rackId: string): void
        +setFloorSettings(settings: FloorSettings): void
        +addRack(): void
        +removeRack(rackId: string): void
        +duplicateRack(rackId: string): void
        +updateRack(rackId: string, updates: Partial~Rack~): void
        +addEquipment(rackId: string, startUnit: number, equipment: Equipment): Promise~PlacementResult~
        +removeEquipment(rackId: string, unit: number): Promise~PlacementResult~
        +moveEquipment(rackId: string, fromUnit: number, toUnit: number): Promise~PlacementResult~
        +clearAllEquipment(rackId: string): void
        +updateEquipmentSize(rackId: string, equipmentId: string, newHeight: number): Promise~void~
        +installCageNut(rackId: string, unit: number, side: string, position: string, nutType: string): void
        +removeCageNut(rackId: string, unit: number, side: string, position: string): void
        +autoInstallCageNutsForUnit(rackId: string, unit: number, nutType: string): void
        +installRail(rackId: string, unit: number, side: 'left' | 'right', railType: RailType): void
        +removeRail(rackId: string, unit: number, side: 'left' | 'right'): void
        +addPduToSlot(rackId: string, side: 'left' | 'right', top: number): void
        +removePdu(rackId: string, pduId: string): void
        +toggleProMode(): void
    }

    class useDragAndDrop {
        +draggedItem: Equipment | null
        +draggedEquipmentInfo: DraggedEquipmentInfo | null
        +hoveredInfo: HoveredInfo
        +handleDragStart(e: DragEvent, item: Equipment): void
        +handleEquipmentDragStart(e: DragEvent, equipment: Equipment, rackId: string, unit: number): void
        +handleDragOver(e: DragEvent, unit: number, rackId: string): void
        +handleDrop(e: DragEvent, startUnit: number, rackId: string): void
        +handleDragEnd(): void
    }

    %% サービス層
    class EquipmentPlacementManager {
        -constraints: PlacementConstraint[]
        +placeEquipment(rack: Rack, startUnit: number, equipment: Equipment, options?: PlacementOptions, isProMode: boolean): Promise~PlacementResult~
        +removeEquipment(rack: Rack, unit: number): Promise~PlacementResult~
        +moveEquipment(rack: Rack, fromUnit: number, toUnit: number, options?: PlacementOptions, isProMode: boolean): Promise~PlacementResult~
        +clearAllEquipment(rack: Rack): Promise~PlacementResult~
        +validatePlacement(context: PlacementContext): Promise~PlacementValidation~
        +getRackOccupancy(rack: Rack): RackOccupancy
        -executePlacement(context: PlacementContext): Promise~PlacementChange[]~
        -initializeConstraints(): void
        -createUnitRangeConstraint(): PlacementConstraint
        -createCapacityConstraint(): PlacementConstraint
        -createOccupancyConstraint(): PlacementConstraint
        -createShelfRequirementConstraint(): PlacementConstraint
        -createProModeCageNutConstraint(): PlacementConstraint
        -createProModeRailConstraint(): PlacementConstraint
        -createRailConflictConstraint(): PlacementConstraint
    }

    class PlacementConstraint {
        +id: string
        +name: string
        +priority: number
        +validate(context: PlacementContext): PlacementValidation
    }

    class PlacementResult {
        +success: boolean
        +position?: PlacementPosition
        +validation: PlacementValidation
        +appliedChanges: PlacementChange[]
        +updatedRack?: Rack
    }

    %% ユーティリティ
    class LocalStorageUtils {
        +loadAppState(): Partial~AppState~
        +saveAppState(state: Partial~AppState~): void
        +clearAppState(): void
        +getStorageSize(): string
        +getStorageInfo(): any
    }

    class UtilityFunctions {
        +calculateTotalStats(racks: Record~string, Rack~): TotalStats
        +calculateRackStats(rack: Rack): RackStats
        +calculateCoolingStats(rack: Rack): CoolingStats
        +canPlaceEquipment(rack: Rack, startUnit: number, equipment: Equipment): any
        +getCageNutStatus(unit: number, rack: Rack): CageNutStatus
        +getPowerStatus(equipment: Equipment, powerConnections: any): any
        +getEquipmentDisplayName(equipment: Equipment, labels: any): string
        +deepCopy~T~(obj: T): T
        +autoInstallCageNuts(unit: number, nutType: string): any
        +getZoomedUnitHeight(zoomLevel: number): number
        +getZoomedFontSize(zoomLevel: number): number
    }

    %% アイコンコンポーネント
    class RackIcons {
        +getEquipmentIcon(type: string, size: number): JSX.Element
        +getAirflowIcon(airflow: string, size: number): JSX.Element
        +getMountingIcon(mountingType: string, needsRails: boolean, size: number): JSX.Element
    }

    %% 関係性の定義
    App *-- "1" useRackState : uses
    App *-- "1" useDragAndDrop : uses
    App *-- "1" LeftSidebar : contains
    App *-- "1" RightSidebar : contains
    App *-- "1" RackView : contains
    App *-- "1" ModalsAndDialogs : contains

    RackView *-- "0..*" RackUnit : contains
    RackView *-- "1" RackStructure : contains
    RackView *-- "1" RackPDU : contains

    RackUnit *-- "1" MountingHoles : contains
    MountingHoles ..> RailManager : manages (conceptually)
    RackUnit ..> RackIcons : uses

    LeftSidebar *-- "1" EquipmentLibrary : contains

    useRackState ..> EquipmentPlacementManager : uses
    useRackState ..> LocalStorageUtils : uses

    useDragAndDrop ..> EquipmentPlacementManager : uses (via moveEquipment)
    useDragAndDrop ..> UtilityFunctions : uses

    EquipmentPlacementManager *-- "0..*" PlacementConstraint : contains
    EquipmentPlacementManager ..> PlacementResult : creates

    Rack *-- "0..*" Equipment : contains
    Rack *-- "1" PhysicalStructure : contains
    Rack *-- "1" RailConfiguration : contains
    Rack ..> FloorSettings : references

    %% 重要な依存関係
    App ..> Rack : manages
    App ..> Equipment : handles
    App ..> FloorSettings : configures

    note for App "メインアプリケーション\n状態管理とイベントハンドリング"
    note for EquipmentPlacementManager "機器配置の制約チェックと実行\n移動・サイズ変更など複雑なロジックを担当"
    note for useRackState "ラック状態管理\nレール・PDU操作を含む\nLocalStorage連携"
    note for Rack "ラックの完全な状態表現\nレールやPDUの情報も含む"
    note for RackView "ラック全体の描画を担当。\nヘッダー、物理構造(RackStructure)、PDU(RackPDU)を描画し、\nユニット数分RackUnitコンポーネントをループで描画する。\nドラッグ中の機器のプレビュー表示も行う。"
    note for RackUnit "個々のUの描画を担当。\n空きユニットか設置済み機器かによって表示を切り替え。\nactiveViewModeに応じて、電源、マウント、エアフロー等の情報をオーバーレイ表示する。\nマウント用の穴(MountingHoles)も描画する。"
    note for useRackState "updateEquipmentSize(rackId, equipmentId, newHeight):\n1. 対象機器を特定し、サイズ変更が可能かチェック。\n2. EquipmentPlacementManagerを使い、既存機器を一時的に削除。\n3. 新しいサイズの機器データを作成。\n4. EquipmentPlacementManagerを使い、新しいサイズで再配置。\n5. 失敗した場合は、元の機器を再配置して状態を復元（ロールバック）。"
```

## 主要設計パターン

### 1. コンポーネント構成
- **プレゼンテーション層**: UI表示とユーザー操作
- **ビジネスロジック層**: EquipmentPlacementManager
- **データ層**: LocalStorage + useRackState

### 2. 状態管理
- **React Hooks**: useRackState, useDragAndDrop
- **Immutable Updates**: 状態の不変性を保持
- **LocalStorage**: 永続化

### 3. 制約システム
- **PlacementConstraint**: 機器配置の制約を定義
- **Priority-based Validation**: 優先度順での制約チェック
- **Error/Warning System**: エラーと警告の分離

### 4. 型安全性
- **TypeScript**: 完全な型定義
- **インターフェース分離**: 明確な責務分担
- **ジェネリック**: 再利用可能なユーティリティ

## 拡張ポイント

1. **新しい機器タイプ**: Equipment型の拡張
2. **新しい制約**: PlacementConstraint実装
3. **新しい表示モード**: activeViewModeの追加
4. **新しいラックタイプ**: rackTypesの拡張
5. **新しい物理構造**: PhysicalStructureの拡張
6. **新しいレールタイプ**: RailTypeの追加と関連ロジックの更新

## パフォーマンス考慮

1. **メモ化**: React.memo, useMemo, useCallback
2. **遅延ローディング**: 大規模データの段階的読み込み
3. **仮想スクロール**: 大量機器の効率的表示
4. **状態最適化**: 必要最小限の再レンダリング
## テスト規約

### 1. ディレクトリ構造
テストファイルは `src/__tests__` ディレクトリ内に配置します。
機能ごとにサブディレクトリを作成し、関連するテストをまとめます。

- `src/__tests__/equipment/`: 機器の配置や管理に関するテスト
- `src/__tests__/integration/`: 複数のコンポーネントやサービスを組み合わせた結合テスト
- `src/__tests__/rail/`: レールやマウントに関するテスト
- `src/__tests__/unit/`: 個別の関数やコンポーネントの単体テスト

### 2. 命名規則
テストファイル名は、テスト対象の機能がわかるように、ケバブケース (`kebab-case`) で命名します。

例: `equipment-placement-manager.spec.ts`

### 3. 拡張子
テストファイルの拡張子は `.spec.ts` を使用します。